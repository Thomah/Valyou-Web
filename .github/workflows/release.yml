name: Release

on:
  push:
    branches:
      - release

jobs:

  verify-version:
    runs-on: ubuntu-latest
    outputs:
      is_snapshot: ${{ steps.test_version.outputs.IS_SNAPSHOT }}
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v2
    - name: Get the version
      id: get_version
      run: "echo ::set-output name=VERSION::$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]')"
    - name: Test version
      id: test_version
      run: echo ::set-output name=IS_SNAPSHOT::$(if [[ "${{ steps.get_version.outputs.VERSION }}" == *"-SNAPSHOT" ]]; then echo "1"; else echo "0"; fi)

  prepare-release:
    needs: verify-version
    runs-on: ubuntu-latest
    if: needs.verify-version.outputs.is_snapshot == 1
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v2
    - name: Get previous version
      id: get_previous_version
      run: "echo ::set-output name=VERSION::$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]')"
    - name: Get released version
      id: get_released_version
      run: echo ::set-output name=VERSION::$(sed "s/-SNAPSHOT//g" <<<"${{ steps.get_previous_version.outputs.VERSION }}")
    - name: Replace version without snapshot
      run: "sed -i 's/\"version\": \"${{ steps.get_previous_version.outputs.VERSION }})\"/\"version\": \"${{ steps.get_released_version.outputs.VERSION }}\"/g' package.json"
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present
    - name: Push released version
      run: git config user.email "${{ secrets.GIT_CONFIG_EMAIL }}" && git config user.name "${{ secrets.GIT_CONFIG_NAME }}"
    - run: git add package.json package-lock.json
    - run: git commit -m "Release '${{ steps.get_released_version.outputs.VERSION }}'"
    - run: git tag ${{ steps.get_released_version.outputs.VERSION }}
    - run: git push origin --follow-tags

  build:
    needs: prepare-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present

  release:
    needs: [prepare-release, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          release_name: ${{ needs.prepare-release.outputs.version }}
          draft: false
          prerelease: false
